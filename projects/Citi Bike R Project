<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Citi Bike Maintenance Dashboard (Shiny)</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 0;
      background-color: #f4f4f4;
      color: #333;
    }

    header {
      background: #0073e6;
      color: white;
      padding: 30px 20px;
      text-align: center;
      border-radius: 8px;
    }

    h1 {
      font-size: 36px !important;
      margin: 0;
    }

    header p {
      font-size: 14px;
      font-style: italic;
    }

    section {
      background: white;
      margin: 20px;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    h2 {
      color: #0073e6;
    }

    ul {
      padding-left: 20px;
    }

    pre {
      background: #333;
      color: #fff;
      padding: 15px;
      overflow-x: auto;
      border-radius: 8px;
      font-size: 13px;
      white-space: pre-wrap;
      word-wrap: break-word;
    }

    a {
      color: #0073e6;
      text-decoration: none;
      font-weight: bold;
    }

    a:hover {
      text-decoration: underline;
    }
  </style>
</head>
<body>
  <header>
    <h1>Citi Bike Maintenance Dashboard (R)</h1>
    <p>Visualizing disabled bike locations in NYC using real-time Citi Bike API data.</p>
  </header>

  <main>
    <section>
      <h2>Overview</h2>
      <p>
        This project helps Citi Bike maintenance teams identify high-priority stations where disabled bikes are located. 
        Using real-time data from Citi Bikeâ€™s open API, this interactive dashboard filters, maps, and summarizes problem areas 
        to support more efficient field operations.
      </p>
    </section>

    <section>
      <h2>Key Features</h2>
      <ul>
        <li>Integrates real-time data from the Citi Bike API.</li>
        <li>Interactive filtering of all stations vs. stations with disabled bikes.</li>
        <li>Map markers sized by # of disabled bikes and colored by bike availability.</li>
        <li>Dynamic map titles and disabled bike summaries.</li>
        <li>Refresh button for up-to-date station status.</li>
      </ul>
    </section>

    <section>
      <h2>R Script: app.R</h2>
      <pre><code>library(shiny)
library(shinydashboard)
library(RCurl)
library(jsonlite)
library(tidyverse)
library(ggmap)
library(dplyr)
library(DT)

ui &lt;- dashboardPage(
  dashboardHeader(title = "Citi Bike Maintenance Dashboard"),
  dashboardSidebar(
    HTML('&lt;p&gt;This is a Citi Bike Maintenance Dashboard. Its goal is to provide information 
         on bike stations with disabled bikes in New York City. Use the map and table to 
         find stations that require attention.&lt;/p&gt;'),
    selectInput(
      "filter", 
      label = "Filter Stations:", 
      choices = c("All stations", "Stations with disabled bikes"),
      selected = "All stations"
    ),
    actionButton("refresh", "Refresh Data")
  ),
  dashboardBody(
    fluidRow(box(textOutput("total_disabled_bikes"), width = 12)),
    fluidRow(box(textOutput("map_title"), width = 12)),
    fluidRow(
      box(
        width = 12,
        height = "550px",
        plotOutput('bike_map', height = "500px", width = '100%')
      )
    ),
    fluidRow(box(textOutput("map_caption"), width = 12)),
    br(),
    fluidRow(box(DTOutput('bike_table', width = '100%')))
  )
)

server &lt;- function(input, output, session) {
  
  data_trigger &lt;- reactiveVal(Sys.time())
  
  observeEvent(input$refresh, {
    data_trigger(Sys.time())
  })
  
  bike_data &lt;- reactive({
    data_trigger()
    
    station_status &lt;- (getURL('https://gbfs.citibikenyc.com/gbfs/en/station_status.json') |&gt; fromJSON())$data$stations
    station_information &lt;- (getURL('https://gbfs.citibikenyc.com/gbfs/en/station_information.json') |&gt; fromJSON())$data$stations
    
    data &lt;- station_information |&gt; 
      inner_join(station_status, by = 'station_id') |&gt; 
      select(
        station_name = name, lat, lon, capacity, 
        num_bikes_available, num_bikes_disabled, 
        num_docks_available, num_docks_disabled
      )
    
    if (input$filter == "Stations with disabled bikes") {
      data &lt;- data |&gt; filter(num_bikes_disabled &gt; 0)
    }
    
    return(data)
  })
  
  output$total_disabled_bikes &lt;- renderText({
    paste("Total Disabled Bikes:", sum(bike_data()$num_bikes_disabled, na.rm = TRUE))
  })
  
  output$map_title &lt;- renderText({
    if (input$filter == "Stations with disabled bikes") {
      "Map of Stations with Disabled Bikes"
    } else {
      "Map of All Stations"
    }
  })
  
  output$map_caption &lt;- renderText({
    "Circle size = # of disabled bikes. Color = # of bikes available."
  })
  
  output$bike_table &lt;- renderDT({
    bike_data() |&gt; 
      select(-lat, -lon) |&gt; 
      datatable()
  })
  
  register_stadiamaps("f6db4743-2ab2-4162-ae14-af535dfca8ba")
  
  output$bike_map &lt;- renderPlot({
    bb &lt;- c(
      left = min(bike_data()$lon, na.rm = TRUE),
      bottom = min(bike_data()$lat, na.rm = TRUE),
      right = max(bike_data()$lon, na.rm = TRUE),
      top = max(bike_data()$lat, na.rm = TRUE)
    )
    
    base_map &lt;- get_stadiamap(bbox = bb, zoom = 10, maptype = 'stamen_toner_lite')
    
    ggmap(base_map) +
      geom_point(
        data = bike_data(),
        aes(
          x = lon, 
          y = lat, 
          color = num_bikes_available, 
          size = num_bikes_disabled
        ),
        alpha = 0.5
      ) +
      scale_size_continuous(name = "Disabled Bikes") +
      labs(color = "Bikes Available")
  })
}

shinyApp(ui = ui, server = server)
</code></pre>
    </section>

    <section>
      <h2>Live Shiny App</h2>
      <p>Explore the interactive dashboard here:</p>
      <p><a href="https://YOUR_USERNAME.shinyapps.io/citi-bike-dashboard" target="_blank">ðŸ”— Citi Bike Shiny App</a></p>
    </section>
  </main>
</body>
</html>
